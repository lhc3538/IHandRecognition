//test v4.0
#include "widget.h"
#include "ui_widget.h"
#include "cv.h"
#include "highgui.h"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/ml/ml.hpp"
#include "opencv2/objdetect/objdetect.hpp"
#include <QImage>
#include "IplImageToQImage.h"
#include <QTime>

using namespace std;
using namespace cv;

CvVideoWriter* videowr;
bool record;

void detectAndDraw( Mat& img,
                    CascadeClassifier& cascade,
                    double scale);

const String cascadeName = "haarcascade_frontalface_alt2.xml";//人脸的训练数据

CascadeClassifier cascade;
double scale =2.5;
void detectAndDraw( Mat& img,
                    CascadeClassifier& cascade,
                    double scale)
{
    int i = 0;
    //double t = 0;
    vector<Rect> faces;
    const static Scalar colors[] =  { CV_RGB(0,0,255),
         CV_RGB(0,128,255),
         CV_RGB(0,255,255),
         CV_RGB(0,255,0),
         CV_RGB(255,128,0),
         CV_RGB(255,255,0),
         CV_RGB(255,0,0),
         CV_RGB(255,0,255)} ;//用不同的颜色表示不同的人脸

    Mat gray, smallImg( cvRound (img.rows/scale), cvRound(img.cols/scale), CV_8UC1 );//将图片缩小，加快检测速度

    cvtColor( img, gray, CV_BGR2GRAY );//因为用的是类haar特征，所以都是基于灰度图像的，这里要转换成灰度图像
    resize( gray, smallImg, smallImg.size(), 0, 0, INTER_LINEAR );//将尺寸缩小到1/scale,用线性插值
    equalizeHist( smallImg, smallImg );//直方图均衡

    //t = (double)cvGetTickCount();//用来计算算法执行时间


//检测人脸
 //detectMultiScale函数中smallImg表示的是要检测的输入图像为smallImg，faces表示检测到的人脸目标序列，1.1表示
 //每次图像尺寸减小的比例为1.1，2表示每一个目标至少要被检测到3次才算是真的目标(因为周围的像素和不同的窗口大
 //小都可以检测到人脸),CV_HAAR_SCALE_IMAGE表示不是缩放分类器来检测，而是缩放图像，Size(30, 30)为目标的
 //最小最大尺寸
    cascade.detectMultiScale( smallImg, faces,
         1.1, 2, 0
         //|CV_HAAR_FIND_BIGGEST_OBJECT
 //|CV_HAAR_DO_ROUGH_SEARCH
         |CV_HAAR_SCALE_IMAGE
         ,
         Size(30, 30) );

    //t = (double)cvGetTickCount() - t;//相减为算法执行的时间
    //printf( "detection time = %g ms\n", t/((double)cvGetTickFrequency()*1000.) );
    for( vector<Rect>::const_iterator r = faces.begin(); r != faces.end(); r++, i++ )
    {
        Point center;//圆心点
        Scalar color = colors[i%8];
        int radius;//半径
        center.x = cvRound((r->x + r->width*0.5)*scale);//还原成原来的大小
        center.y = cvRound((r->y + r->height*0.5)*scale);
        radius = cvRound((r->width + r->height)*0.25*scale);
        circle( img, center, radius, color, 1.5, 8, 0 );//画圆
    }
    imshow( "window", img );
}


Widget::Widget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::Widget)
{
    ui->setupUi(this);
    cascade.load(cascadeName);

    client=new QTcpSocket;
    connect(client,SIGNAL(connected()),this,SLOT(sendrequest()));
    connect(client,SIGNAL(readyRead()),this,SLOT(read()));
    connect(client,SIGNAL(error(QAbstractSocket::SocketError)),this,SLOT(socketerror()));
}

Widget::~Widget()
{
    delete ui;
}

void Widget::on_connect_clicked()
{
    ui->statuslabel->setText(tr("connecting..."));
    client->connectToHost(ui->lineEdit->text(),ui->port->text().toInt());
}

void Widget::on_record_clicked()
{
    CvSize size;
    size.width=320;
    size.height=240;
    QTime time;
    time=time.currentTime();//获得当前时间，如:08:37:34
    QString Tstr=time.toString()+".avi";//转换成QString类型，如08:37:34.avi
    Tstr=Tstr.replace(QChar(':'),QLatin1String("-"));//将:换成-，因为windows下文件名不能含:
    const char* filen=Tstr.toStdString().data();//转换成const char*型的文件名
    videowr=cvCreateVideoWriter(filen,CV_FOURCC('M','J','P','G'),20,size,1);
    record=true;
}

void Widget::on_stoprecord_clicked()
{
    record=false;
    cvReleaseVideoWriter(&videowr);
}

void Widget::on_stop_clicked()
{
    client->abort();
    block1.clear();
    ui->statuslabel->setText(tr("stoped"));
}

void Widget::sendrequest()
{
    QByteArray block("GET /?action=stream\n\n");
    QDataStream out(&block, QIODevice::WriteOnly);
    out.setVersion(QDataStream::Qt_4_0);
    client->write(block);
}

void Widget::socketerror()
{
    ui->statuslabel->setText(tr("socket error!"));
}

void Widget::read()
{    
    if(client->bytesAvailable()<3000)
        return;

    QByteArray tmpBlock;
    static const char SOIData[]={0xff,0xd8};
    static const char EOIData[]={0xff,0xd9};

    QByteArray SOIstr=QByteArray::fromRawData(SOIData,sizeof(SOIData));
    QByteArray EOIstr=QByteArray::fromRawData(EOIData,sizeof(EOIData));

    int SOIPos=0;
    int EOIPos=0;

    mutex.lock();
    tmpBlock=client->readAll();
    block1.append(tmpBlock);//保存实际读到的数据

    if((SOIPos=block1.indexOf(SOIstr))!= -1)
    {
        if((EOIPos=block1.indexOf(EOIstr))!= -1)
        {
            EOIPos += 2;
            if(EOIPos>SOIPos)
            {
                QByteArray ba;
                ba=block1.mid(SOIPos,EOIPos-SOIPos);

                QImage image;
                QPixmap pix;
                image.loadFromData(ba);
                pix=pix.fromImage(image);
                ui->Image->setPixmap(pix);//视频预览

                if(record==true)
                {
                    IplImage* img=(IplImage*)malloc(sizeof(IplImage));
                    img = QImageToIplImage(&image);//将QImage转换成IplImage
                    cvWriteFrame(videowr,img);//将IplImage图片写成视频
                }

                ba.clear();
            }
            block1.remove(0,EOIPos+1);
        }
    }
    mutex.unlock();
}
